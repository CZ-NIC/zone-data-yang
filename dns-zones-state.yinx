<?xml version="1.0" encoding="utf-8"?>
<module name="dns-zones-state"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:dnszs="http://www.nic.cz/ns/yang/dns-zones-state"
        xmlns:h="http://www.w3.org/1999/xhtml">
  <namespace uri="http://www.nic.cz/ns/yang/dns-zones-state"/>
  <prefix value="dnszs"/>
  <yang-version value="1.1"/>

  <!-- Imports -->

  <import module="ietf-inet-types">
    <prefix value="inet"/>
  </import>
  <import module="iana-dns-parameters">
    <prefix value="ianadns"/>
  </import>
  <import module="dns-zone-common">
    <prefix value="dnszc"/>
  </import>

  <!-- Metadata -->

  <organization>
    <text>CZ.NIC, z. s. p. o.</text>
  </organization>
  <contact>
    <text>
      <h:p>
        Editor:   Ladislav Lhotka<h:br/>
                  &lt;mailto:lhotka@nic.cz&gt;
      </h:p>
    </text>
  </contact>
  <description>
    <text>
      <h:p>This module defines a DNS zone content as state data.</h:p>
    </text>
  </description>
  <reference>
    <text>
      RFC 1035: Domain Names - Implementation and Specification.
    </text>
  </reference>
  <revision date="2017-01-12">
    <description>
      <text>Initial revision.</text>
    </description>
  </revision>

  <!-- State data -->

  <list name="zone">
    <config value="false"/>
    <key value="name class"/>
    <description>
      <text>
	Data for a DNS zone.
      </text>
    </description>
    <leaf name="name">
      <description>
	<text>
	  Zone name.
	</text>
      </description>
      <type name="inet:domain-name"/>
    </leaf>
    <leaf name="class">
      <type name="ianadns:class"/>
      <description>
	<text>RR Class</text>
      </description>
    </leaf>
    <list name="rrset">
      <key value="owner type"/>
      <description>
	<text>RRSet</text>
      </description>
      <uses name="dnszc:common-rr-data"/>
      <uses name="dnszc:rrsig-data">
	<refine target-node="RRSIG">
	  <presence value="Signed RRSet"/>
	</refine>
      </uses>
      <list name="rdata">
	<uses name="dnszc:rdata-fields">
	  <refine target-node="rdata-content">
	    <mandatory value="true"/>
	  </refine>
	  <refine target-node="rdata-content/SOA/SOA">
	    <must condition="derived-from-or-self(../../type, 'ianadns:SOA')"/>
	  </refine>
	  <refine target-node="rdata-content/A/A">
	    <must condition="derived-from-or-self(../../type, 'ianadns:A')"/>
	  </refine>
	  <refine target-node="rdata-content/CNAME/CNAME">
	    <must condition="derived-from-or-self(../../type, 'ianadns:CNAME')"/>
	  </refine>
	  <refine target-node="rdata-content/HINFO/HINFO">
	    <must condition="derived-from-or-self(../../type, 'ianadns:HINFO')"/>
	  </refine>
	  <refine target-node="rdata-content/MB/MB">
	    <must condition="derived-from-or-self(../../type, 'ianadns:MB')"/>
	  </refine>
	  <refine target-node="rdata-content/MD/MD">
	    <must condition="derived-from-or-self(../../type, 'ianadns:MD')"/>
	  </refine>
	  <refine target-node="rdata-content/MF/MF">
	    <must condition="derived-from-or-self(../../type, 'ianadns:MF')"/>
	  </refine>
	  <refine target-node="rdata-content/MG/MG">
	    <must condition="derived-from-or-self(../../type, 'ianadns:MG')"/>
	  </refine>
	  <refine target-node="rdata-content/MINFO/MINFO">
	    <must condition="derived-from-or-self(../../type, 'ianadns:MINFO')"/>
	  </refine>
	  <refine target-node="rdata-content/MR/MR">
	    <must condition="derived-from-or-self(../../type, 'ianadns:MR')"/>
	  </refine>
	  <refine target-node="rdata-content/MX/MX">
	    <must condition="derived-from-or-self(../../type, 'ianadns:MX')"/>
	  </refine>
	  <refine target-node="rdata-content/NS/NS">
	    <must condition="derived-from-or-self(../../type, 'ianadns:NS')"/>
	  </refine>
	  <refine target-node="rdata-content/NULL/NULL">
	    <must condition="derived-from-or-self(../../type, 'ianadns:NULL')"/>
	  </refine>
	  <refine target-node="rdata-content/PTR/PTR">
	    <must condition="derived-from-or-self(../../type, 'ianadns:PTR')"/>
	  </refine>
	  <refine target-node="rdata-content/TXT/TXT">
	    <must condition="derived-from-or-self(../../type, 'ianadns:TXT')"/>
	  </refine>
	  <refine target-node="rdata-content/WKS/WKS">
	    <must condition="derived-from-or-self(../../type, 'ianadns:WKS')"/>
	  </refine>
	  <refine target-node="rdata-content/AAAA/AAAA">
	    <must condition="derived-from-or-self(../../type, 'ianadns:AAAA')"/>
	  </refine>
	  <refine target-node="rdata-content/DNSKEY/DNSKEY">
	    <must condition="derived-from-or-self(../../type, 'ianadns:DNSKEY')"/>
	  </refine>
	  <refine target-node="rdata-content/NSEC/NSEC">
	    <must condition="derived-from-or-self(../../type, 'ianadns:NSEC')"/>
	  </refine>
	  <refine target-node="rdata-content/DS/DS">
	    <must condition="derived-from-or-self(../../type, 'ianadns:DS')"/>
	  </refine>
	  <refine target-node="rdata-content/NSEC3/NSEC3">
	    <must condition="derived-from-or-self(../../type, 'ianadns:NSEC3')"/>
	  </refine>
	  <refine target-node="rdata-content/NSEC3PARAM/NSEC3PARAM">
	    <must condition="derived-from-or-self(../../type, 'ianadns:NSEC3PARAM')"/>
	  </refine>
	  <refine target-node="rdata-content/TLSA/TLSA">
	    <must condition="derived-from-or-self(../../type, 'ianadns:TLSA')"/>
	  </refine>
	  <refine target-node="rdata-content/IPSECKEY/IPSECKEY">
	    <must condition="derived-from-or-self(../../type, 'ianadns:IPSECKEY')"/>
	  </refine>
	  <refine target-node="rdata-content/DNAME/DNAME">
	    <must condition="derived-from-or-self(../../type, 'ianadns:DNAME')"/>
	  </refine>
	  <refine target-node="rdata-content/SSHFP/SSHFP">
	    <must condition="derived-from-or-self(../../type, 'ianadns:SSHFP')"/>
	  </refine>
	</uses>
      </list>
    </list>
  </list>

</module>
